Model
**************

As our application grows, we soon find out that we need to perform similiar database operations in various locations and in various presenters, for example acquiring newest published articles. If we improve our application by adding a flag to articles to indicate work-in-progress state, we must also go through all locations in our application and add a where clause to make sure only finished articles are selected. 

At this point, direct work with the database becomes insufficient and it will be smarter to help ourselves with a new function that returns published articles. And when we add another clause later (for example not to display articles with future date), we only edit our code in one place.

We'll place the function into the `ArticleManager class and call it `getPublicArticles()`.

We'll create our model class `ArticlesManager` in the directory `app/model/` to take care of our articles. Let's place it into the `ArticlesManager.php` file.

/---php
<?php

namespace App\Model;

use Nette;

class ArticleManager
{
	use Nette\SmartObject;

	/**
	 * @var Nette\Database\Context
	 */
	private $database;

	public function __construct(Nette\Database\Context $database)
	{
		$this->database = $database;
	}

	public function getPublicArticles()
	{
		return $this->database->table('posts')
			->where('created_at < ', new \DateTime())
			->order('created_at DESC');
	}
}

\--

We've created the class using a constructor that passes database Context:[api:Nette\Database\Context].

If we didn't use the framework and the strength of DI container, we would have to first create the following instances: `Nette\Database\Connection`, `Nette\Database\Structure`, `Nette\Database\Conventions` and `Nette\Caching\Storages\FileStorage` (that also needs some dependencies such as database username or password). All of that only to create a `Nette\Database\Context` instance that would later be used to create an `ArticleManager` instance.

/--php
	...
	// everything needed for Context
	$dbConnection = new Nette\Database\Connection(...);
	$dbStructure = new Nette\Database\Structure(...);
	$dbConventions = new Nette\Database\Conventions\DiscoveredConventions(...);
	$dbCache = new Nette\Caching\Storages\FileStorage(...);

	// creating Context
	$dbContext = new Nette\Database\Context($dbConnection, $dbStructure, $dbConventions, $dbCache);

	// creating ArticleManager
	$articleManager = new App\Model\ArticleManager($dbContext)
	...
\--
